-- Description:
-- L1Menu logic generated by VHDL Producer:

-- Module ID: 0

-- Name of L1 Trigger Menu:
-- L1Menu_test_compare_gtl_struct_v5

-- Unique ID of L1 Trigger Menu:
-- 7980afa2-2223-470a-a8cd-d79883406ff9

-- Unique ID of firmware implementation:
-- b73191c2-b016-4684-be31-cd40e5e1e44c

-- Scale set:
-- scales_2018_08_07

-- VHDL producer version
-- v2.7.1

-- ========================================================

library ieee;
use ieee.std_logic_1164.all;

use work.lhc_data_pkg.all;
use work.gtl_pkg.all;
use work.l1menu_pkg.all;

entity l1menu is
    port(
        lhc_clk : in std_logic;
        data : in data_pipeline_record;
        conv : in conv_pipeline_record;
        algo : out std_logic_vector(NR_ALGOS-1 downto 0));
end l1menu;

architecture rtl of l1menu is

-- Calculations outputs
    -- Differences
    signal sub_eta_jet_tau : obj_bx_max_eta_range_array;
    signal sub_phi_jet_tau : obj_bx_max_phi_range_array;
    -- Correlation cuts
    signal deta_jet_tau : obj_bx_corr_cuts_std_logic_array;
    signal dphi_jet_tau : obj_bx_corr_cuts_std_logic_array;
    signal dr_jet_tau : obj_bx_corr_cuts_std_logic_array;

-- Comparators outputs
    -- Object cuts    
    signal pt_jet_1 : jet_obj_t;
    signal pt_tau_1 : tau_obj_t;
    -- Correlation cuts    
    signal dr_jet_tau_1 : jet_tau_t;

-- Conditions inputs
    -- Object cuts "and"  
    signal comb_jet_1 : jet_obj_t;
    signal comb_tau_1 : tau_obj_t;

-- Signal definition for conditions names
    signal double_jet_ov_rm_i0 : std_logic;
    signal quad_jet_ov_rm_i3 : std_logic;
    signal single_jet_ov_rm_i1 : std_logic;
    signal triple_jet_ov_rm_i2 : std_logic;

-- Signal definition for algorithms names
    signal l1_test_jet30_tau45_rmovlp : std_logic;
    signal l1_test_double_jet30_tau45_rmovlp : std_logic;
    signal l1_test_triple_jet30_tau45_rmovlp : std_logic;
    signal l1_test_quad_jet30_tau45_rmovlp : std_logic;
    
begin

-- First stage: calculations

    calc_2_i: entity work.sub_eta
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, (jet_t,tau_t)
        )
        port map(
            conv.jet(bx(0)).eta,
            conv.tau(bx(0)).eta,
            sub_eta_jet_tau(bx(0),bx(0))
        );

    calc_3_i: entity work.diff_eta_lut
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, (jet_t,tau_t)
        )
        port map(
            sub_eta_jet_tau(bx(0),bx(0)),
            deta_jet_tau(bx(0),bx(0))
        );

    calc_4_i: entity work.sub_phi
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, (jet_t,tau_t),
            JET_TAU_PHI_HALF_RANGE_BINS
        )
        port map(
            conv.jet(bx(0)).phi,
            conv.tau(bx(0)).phi,
            sub_phi_jet_tau(bx(0),bx(0))
        );

    calc_5_i: entity work.diff_phi_lut
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, (jet_t,tau_t)
        )
        port map(
            sub_phi_jet_tau(bx(0),bx(0)),
            dphi_jet_tau(bx(0),bx(0))
        );

    calc_6_i: entity work.delta_r
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, (jet_t,tau_t)
        )
        port map(
            deta_jet_tau(bx(0),bx(0)),
            dphi_jet_tau(bx(0),bx(0)),
            dr_jet_tau(bx(0),bx(0))
        );
        
-- Second stage: comparisons

    comp_1_i: entity work.comparators_obj_cuts
        generic map(
            N_JET_OBJECTS, JET_PT_WIDTH,
            GE, X"003C", X"0000", X"0000"
        )
        port map(
            lhc_clk, data.jet(bx(0)).pt, pt_jet_1
        );

    comp_2_i: entity work.comparators_obj_cuts
        generic map(
            N_TAU_OBJECTS, TAU_PT_WIDTH,
            GE, X"005A", X"0000", X"0000"
        )
        port map(
            lhc_clk, data.tau(bx(0)).pt, pt_tau_1
        );

    comp_6_i: entity work.comparators_corr_cuts
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, (jet_t,tau_t),
            EG_JET_DELTAR_VECTOR_WIDTH, deltaR,
            X"0000000000000", X"000000000A028"
        )
        port map(
            lhc_clk, dr_jet_tau(bx(0),bx(0)), dr_jet_tau_1
        );

-- Third stage: conditions and algos
    
    -- Creating condition inputs (combination of object cuts)
    
    comb_jet_1 <= pt_jet_1;
    comb_tau_1 <= pt_tau_1;
        
    -- Instantiations of conditions
    
    cond_single_jet_ov_rm_i1_i: entity work.combinatorial_conditions_ovrm
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, 1,
            ((0,11),(0,0),(0,0),(0,0)),
            ((0,11),(0,0),(0,0),(0,0)),
            false
        )
        port map(
            lhc_clk, 
            comb_1 => comb_jet_1,
            comb_ovrm => comb_tau_1,
            dr_ovrm => dr_jet_tau_1,
            cond_o => single_jet_ov_rm_i1
        );

    cond_double_jet_ov_rm_i0_i: entity work.combinatorial_conditions_ovrm
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, 2,
            ((0,11),(0,11),(0,0),(0,0)),
            ((0,11),(0,0),(0,0),(0,0)),
            false
        )
        port map(
            lhc_clk, 
            comb_1 => comb_jet_1,
            comb_2 => comb_jet_1,
            comb_ovrm => comb_tau_1,
            dr_ovrm => dr_jet_tau_1,
            cond_o => double_jet_ov_rm_i0
        );

    cond_triple_jet_ov_rm_i2_i: entity work.combinatorial_conditions_ovrm
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, 3,
            ((0,11),(0,11),(0,11),(0,0)),
            ((0,11),(0,0),(0,0),(0,0)),
            false
        )
        port map(
            lhc_clk, 
            comb_1 => comb_jet_1,
            comb_2 => comb_jet_1,
            comb_3 => comb_jet_1,
            comb_ovrm => comb_tau_1,
            dr_ovrm => dr_jet_tau_1,
            cond_o => triple_jet_ov_rm_i2
        );

    cond_quad_jet_ov_rm_i3_i: entity work.combinatorial_conditions_ovrm
        generic map(
            N_JET_OBJECTS, N_TAU_OBJECTS, 4,
            ((0,11),(0,11),(0,11),(0,11)),
            ((0,11),(0,0),(0,0),(0,0)),
            false
        )
        port map(
            lhc_clk, 
            comb_1 => comb_jet_1,
            comb_2 => comb_jet_1,
            comb_3 => comb_jet_1,
            comb_4 => comb_jet_1,
            comb_ovrm => comb_tau_1,
            dr_ovrm => dr_jet_tau_1,
            cond_o => quad_jet_ov_rm_i3
        );

-- Instantiations of algorithms

-- 0 L1_Test_Jet30_Tau45_Rmovlp : comb_orm{JET30,TAU45}[ORMDR_0p2]
l1_test_jet30_tau45_rmovlp <= single_jet_ov_rm_i1;
algo(0) <= l1_test_jet30_tau45_rmovlp;

-- 1 L1_Test_DoubleJet30_Tau45_Rmovlp : comb_orm{JET30,JET30,TAU45}[ORMDR_0p2]
l1_test_double_jet30_tau45_rmovlp <= double_jet_ov_rm_i0;
algo(1) <= l1_test_double_jet30_tau45_rmovlp;

-- 2 L1_Test_TripleJet30_Tau45_Rmovlp : comb_orm{JET30,JET30,JET30,TAU45}[ORMDR_0p2]
l1_test_triple_jet30_tau45_rmovlp <= triple_jet_ov_rm_i2;
algo(2) <= l1_test_triple_jet30_tau45_rmovlp;

-- 3 L1_Test_QuadJet30_Tau45_Rmovlp : comb_orm{JET30,JET30,JET30,JET30,TAU45}[ORMDR_0p2]
l1_test_quad_jet30_tau45_rmovlp <= quad_jet_ov_rm_i3;
algo(3) <= l1_test_quad_jet30_tau45_rmovlp;

end architecture rtl;

